// <auto-generated />
using System;
using LiftSearch.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LiftSearch.Migrations
{
    [DbContext(typeof(LsDbContext))]
    partial class LsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LiftSearch.Data.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("cancelledCountDriver")
                        .HasColumnType("integer");

                    b.Property<string>("driverBio")
                        .HasColumnType("text");

                    b.Property<DateTime?>("lastTripDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("registeredDriverDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.Passenger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<string>("endAdress")
                        .HasColumnType("text");

                    b.Property<string>("endCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("registrationStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("startAdress")
                        .HasColumnType("text");

                    b.Property<string>("startCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("travelerId")
                        .HasColumnType("integer");

                    b.Property<int>("tripId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("travelerId");

                    b.HasIndex("tripId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("driverId")
                        .HasColumnType("integer");

                    b.Property<string>("endCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("endTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("lastEditTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("price")
                        .HasColumnType("double precision");

                    b.Property<int>("seatsCount")
                        .HasColumnType("integer");

                    b.Property<string>("startCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("startTime")
                        .HasColumnType("integer");

                    b.Property<DateTime>("tripDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("tripStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("driverId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("cancelledCountTraveler")
                        .HasColumnType("integer");

                    b.Property<int>("driverStatus")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("registrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.Driver", b =>
                {
                    b.HasOne("LiftSearch.Data.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.Passenger", b =>
                {
                    b.HasOne("LiftSearch.Data.Entities.User", "traveler")
                        .WithMany()
                        .HasForeignKey("travelerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftSearch.Data.Entities.Trip", "trip")
                        .WithMany()
                        .HasForeignKey("tripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("traveler");

                    b.Navigation("trip");
                });

            modelBuilder.Entity("LiftSearch.Data.Entities.Trip", b =>
                {
                    b.HasOne("LiftSearch.Data.Entities.Driver", "driver")
                        .WithMany()
                        .HasForeignKey("driverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("driver");
                });
#pragma warning restore 612, 618
        }
    }
}
